<?xml version="1.0" encoding="UTF-8"?>
<dev-system>
    <meta>
        <description>Master configuration and reference system for development tracking and AI assistance</description>
        <version>1.0.1</version>
        <last-updated>2024-01-21</last-updated>
    </meta>

    <linked-files>
        <file id="devhistory" path="devhistory.xml">Development history and changelog</file>
        <file id="devprogress" path="devprogress.xml">Current progress and next steps</file>
        <file id="devgoal" path="devgoal.xml">Project goals and future plans</file>
        <file id="design" path="design-philosophy.xml">Design guidelines and patterns</file>
    </linked-files>

    <dev-functions>
        <function id="CLEAN">
            <description>Clean and organize development tracking files</description>
            <steps>
                <step>Summarize devprogress.xml</step>
                <step>Create concise history entry in devhistory.xml</step>
                <step>Transfer function notes to devgoal.xml</step>
                <step>Update next steps in devprogress.xml</step>
            </steps>
            <tags>
                <tag ref="devprogress"/>
                <tag ref="devhistory"/>
                <tag ref="devgoal"/>
            </tags>
        </function>

        <function id="PROCEED">
            <description>Review all documentation before proceeding with development</description>
            <steps>
                <step>Read devfunction.xml for guidelines</step>
                <step>Review devprogress.xml for context</step>
                <step>Check devhistory.xml for relevant history</step>
                <step>Consult devgoal.xml for direction</step>
                <step>Follow design-philosophy.xml patterns</step>
            </steps>
            <tags>
                <tag ref="all-files"/>
            </tags>
        </function>

        <function id="RECORD">
            <description>Examine progress and update tracking files</description>
            <steps>
                <step>Review recently modified files and changes</step>
                <step>Check completed items in devprogress.xml</step>
                <step>Update in-progress items status</step>
                <step>Verify and update next steps</step>
                <step>Add new monitoring needs if identified</step>
                <step>Update environment setup if changed</step>
            </steps>
            <tags>
                <tag ref="devprogress"/>
                <tag ref="devhistory"/>
            </tags>
            <related-functions>
                <function ref="CLEAN">Can be chained for full system update</function>
                <function ref="PROCEED">Can be chained for next steps</function>
            </related-functions>
        </function>
    </dev-functions>

    <critical-rules>
        <rule id="model-id">ALWAYS use "grok-2-latest" as the xAI model identifier</rule>
        <rule id="streaming">NEVER use StreamingTextResponse - use streamText().toDataStreamResponse()</rule>
        <rule id="planning">ALWAYS check devprogress.xml before changes</rule>
        <rule id="updates">ALWAYS update tracking files after changes</rule>
        <rule id="types">ALWAYS check package type definitions</rule>
        <rule id="cross-linking">ALWAYS add new cross-linking when identifying logical relationships that strengthen system hierarchy</rule>
        <rule id="shell">ALWAYS use PowerShell commands for terminal operations</rule>
        <rule id="step-by-step">ALWAYS work through solutions step by step for both AI and user understanding</rule>
        <rule id="project-context">ALWAYS examine current project folder structure, files, and logic flows before generating any output to ensure contextual accuracy and consistency</rule>
        <rule id="preserve-functionality">NEVER remove or modify functionality unrelated to the specific issue being worked on - maintain strict scope isolation</rule>
    </critical-rules>

    <logging-guidelines>
        <guideline>NEVER remove console logging unless explicitly requested</guideline>
        <guideline>Maintain all error and state change logging</guideline>
        <guideline>Keep verbose logging in development</guideline>
        <structure>
            <log type="info">Use console.log for info/state tracking</log>
            <log type="error">Use console.error with full context</log>
            <log type="warn">Use console.warn for potential issues</log>
        </structure>
    </logging-guidelines>

    <code-style>
        <guideline>Write concise, technical TypeScript code</guideline>
        <guideline>Use functional and declarative patterns</guideline>
        <guideline>Prefer iteration over duplication</guideline>
        <guideline>Use descriptive variable names with auxiliary verbs</guideline>
        <syntax>
            <rule>Use "function" keyword for pure functions</rule>
            <rule>Avoid unnecessary curly braces in conditionals</rule>
            <rule>Use concise syntax for simple statements</rule>
            <rule>Use declarative JSX</rule>
        </syntax>
    </code-style>

    <file-structure>
        <guideline>Use lowercase with dashes for directories</guideline>
        <guideline>Favor named exports for components</guideline>
        <guideline>Structure: exports, subcomponents, helpers, static, types</guideline>
        <examples>
            <directory>components/auth-wizard</directory>
            <directory>components/blog-section</directory>
        </examples>
    </file-structure>

    <typescript-usage>
        <guideline>Use TypeScript for all code</guideline>
        <guideline>Prefer interfaces over types</guideline>
        <guideline>Avoid enums; use maps instead</guideline>
        <guideline>Use functional components with TypeScript interfaces</guideline>
    </typescript-usage>

    <ui-guidelines>
        <guideline>Use Shadcn UI, Radix, and Tailwind</guideline>
        <guideline>Implement responsive design with Tailwind CSS</guideline>
        <guideline>Use mobile-first approach</guideline>
        <image-optimization>
            <rule>Use WebP format for images</rule>
            <rule>Include size data in image components</rule>
            <rule>Implement lazy loading for images</rule>
        </image-optimization>
    </ui-guidelines>

    <performance>
        <guideline>Minimize 'use client', 'useEffect', and 'setState'</guideline>
        <guideline>Favor React Server Components (RSC)</guideline>
        <guideline>Wrap client components in Suspense</guideline>
        <guideline>Use dynamic loading for non-critical components</guideline>
        <web-vitals>
            <metric>Optimize LCP (Largest Contentful Paint)</metric>
            <metric>Minimize CLS (Cumulative Layout Shift)</metric>
            <metric>Improve FID (First Input Delay)</metric>
        </web-vitals>
        <state-management>
            <rule>Use 'nuqs' for URL search parameter state</rule>
            <rule>Favor server components for data fetching</rule>
            <rule>Limit client components to UI interactions</rule>
        </state-management>
    </performance>

    <next-patterns>
        <pattern>Follow Next.js documentation for data fetching</pattern>
        <pattern>Use App Router patterns for routing</pattern>
        <pattern>Implement proper rendering strategies</pattern>
        <client-components>
            <rule>Use only for Web API access in small components</rule>
            <rule>Avoid for data fetching</rule>
            <rule>Avoid for state management when possible</rule>
        </client-components>
    </next-patterns>

    <function-chaining>
        <format>@[FUNCTION1->FUNCTION2->FUNCTION3]</format>
        <examples>
            <chain>@[RECORD->PROCEED]</chain>
            <chain>@[CLEAN->RECORD->PROCEED]</chain>
        </examples>
        <rules>
            <rule>Use square brackets to encapsulate chain</rule>
            <rule>Separate functions with arrow operator -></rule>
            <rule>Prefix with @ symbol for visibility</rule>
            <rule>Functions execute in left-to-right order</rule>
        </rules>
    </function-chaining>
</dev-system> 