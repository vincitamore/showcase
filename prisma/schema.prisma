// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model ChatSession {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  messages  Message[]
  ipAddress String?
  userAgent String?
}

model Message {
  id            String      @id @default(cuid())
  createdAt     DateTime    @default(now())
  content       String
  role          String // 'user' | 'assistant'
  chatSession   ChatSession @relation(fields: [chatSessionId], references: [id], onDelete: Cascade)
  chatSessionId String
  tokens        Int         @default(0)
  skillTags     String[] // Array of skill tags referenced in the response

  @@index([chatSessionId])
}

model SystemPrompt {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   String
  version   String   @unique
  isActive  Boolean  @default(false)
  metadata  Json? // Store any additional prompt configuration
}

model RateLimit {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  hits      Int      @default(0)
  resetAt   DateTime
  ipAddress String   @unique

  @@index([ipAddress])
}

// New models for Twitter integration
model Tweet {
  id                  String        @id
  text                String        @db.Text // Use Text type to support extended tweets
  createdAt           DateTime
  updatedAt           DateTime      @updatedAt
  publicMetrics       Json? // Likes, retweets, etc.
  entities            TweetEntity[]
  editHistoryTweetIds String[]
  authorId            String
  cacheEntries        TweetCache[]  @relation("CachedTweets")

  @@index([createdAt])
  @@index([authorId])
}

model TweetEntity {
  id          String  @id @default(cuid())
  type        String // url, mention, hashtag, cashtag, annotation
  text        String
  url         String?
  expandedUrl String?
  mediaKey    String?
  tweet       Tweet   @relation(fields: [tweetId], references: [id], onDelete: Cascade)
  tweetId     String
  metadata    Json? // Additional entity-specific data

  @@index([tweetId])
  @@index([type])
}

model TweetCache {
  id        String    @id @default(cuid())
  type      String // 'current' | 'previous' | 'selected'
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  tweets    Tweet[]   @relation("CachedTweets")
  expiresAt DateTime?
  isActive  Boolean   @default(true)

  @@index([type])
  @@index([isActive])
}

model TwitterRateLimit {
  id          String   @id @default(cuid())
  endpoint    String
  resetAt     DateTime
  remaining   Int
  lastUpdated DateTime @default(now())

  @@unique([endpoint])
  @@index([endpoint, resetAt])
}

// New model for tracking Twitter API quota usage
model TwitterQuotaUsage {
  id        String   @id @default(cuid())
  date      DateTime @unique
  used      Int      @default(0)
  limit     Int      @default(100)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([date])
}

model TempImage {
  id        String   @id @default(cuid())
  data      String // Base64 encoded image data
  mimeType  String // Always "image/jpeg"
  expiresAt DateTime // TTL for the image
  createdAt DateTime @default(now())

  @@index([expiresAt])
}

model Log {
  id        String   @id @default(cuid())
  timestamp DateTime @default(now())
  level     String   @default("info")
  message   String
  duration  Int?
  error     Boolean  @default(false)
  route     String?
  method    String?
  status    Int?
  metadata  Json?

  @@index([timestamp])
  @@index([route])
  @@index([level])
}

model DatabaseMetric {
  id        String   @id @default(cuid())
  timestamp DateTime @default(now())
  duration  Int
  query     String?
  error     Boolean  @default(false)
  route     String?
  method    String?
  status    Int?
  metadata  Json?

  @@index([timestamp(sort: Desc)])
  @@map("database_metrics")
}
